{"version":3,"sources":["webpack:///./src/components/maps/japan-2023.js","webpack:///./src/pages/japan-2023.jsx"],"names":["JapanMap2023","_Component","props","_this","call","getLoc","state","loc","drawChart","div","d3","select","remove","height","node","offsetHeight","width","offsetWidth","console","log","svg","append","attr","projection","scale","center","translate","path","selected","title_loc","visited","then","data","features","topojson","objects","japan","selectAll","enter","style","e","properties","nam","includes","on","setLoc","newLoc","newLocJa","nam_ja","setState","loc_ja","this","title_loc_ja","setTitleLoc","_inheritsLoose","_proto","prototype","componentDidMount","window","addEventListener","bind","render","React","createElement","Fragment","id","className","Component","Japan2023","_ref","useState","openPhoto","setOpenPhoto","modalHidden","setModalHidden","photos","allPhotos","allFile","edges","i","length","name","place","split","push","image","getImage","childImageSharp","Layout","tab","SEO","title","Title","Text","description","Flex","boxWidth","toLowerCase","map","photo","index","Box","key","onClick","GatsbyImage","alt","cursor","PhotoModal","text","hidden","newModalHidden","info","japanPhotoInformation","date","location"],"mappings":"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","file":"component---src-pages-japan-2023-jsx-d40284377c6d7617bd50.js","sourcesContent":["import React, { Component } from \"react\"\nimport * as d3 from \"d3\"\nimport * as topojson from \"topojson-client\"\nimport \"./japan.css\"\n\nclass JapanMap2023 extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title_loc: \"Japan\",\n      title_loc_ja: \"日本\",\n      loc: \"Japan\",\n      loc_ja: \"日本\",\n    }\n  }\n\n  getLoc = () => {\n    return this.state.loc\n  }\n\n  componentDidMount() {\n    this.drawChart()\n    window.addEventListener(\"resize\", this.drawChart.bind(this))\n  }\n\n  drawChart = () => {\n    const div = d3.select(\"#japan\")\n    div.select(\"svg\").remove()\n\n    const height = +div.node().offsetHeight\n    const width = +div.node().offsetWidth\n    console.log(\"height: \", height)\n    console.log(\"width: \", width)\n\n    const svg = div.append(\"svg\").attr(\"width\", width).attr(\"height\", height)\n\n    var projection = d3\n      .geoMercator()\n      .scale(1200)\n      .center([137, 37])\n      .translate([width / 2, 250])\n\n    var path = d3.geoPath().projection(projection)\n\n    var selected = this.state.title_loc\n\n    const visited = [\n      \"Tokyo To\",\n      \"Kyoto Fu\",\n      \"Osaka Fu\",\n      \"Nagano Ken\",\n      \"Hokkai Do\",\n    ]\n    const selectedColor = \"#FFD148\"\n    const visitedColor = \"#f5d1c6\"\n    const nonVisitedColor = \"white\"\n\n    const setLoc = (newLoc, newLocJa) => {\n      this.setState({ loc: newLoc, loc_ja: newLocJa })\n    }\n\n    const setTitleLoc = (newLoc, newLocJa) => {\n      this.setState({ title_loc: newLoc })\n      this.setState({ title_loc_ja: newLocJa })\n      this.props.setLoc(newLoc)\n      selected = this.state.title_loc\n    }\n\n    const resetLoc = () => {\n      this.setState({\n        loc: this.state.title_loc,\n        loc_ja: this.state.title_loc_ja,\n      })\n    }\n\n    d3.json(\"/json/topojapan.json\").then(data => {\n      var features = topojson.feature(data, data.objects.japan).features\n\n      svg\n        .selectAll(\"path\")\n        .data(features)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path)\n        .attr(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"0.6\")\n        .style(\"fill\", function (e) {\n          if (selected === e.properties.nam) {\n            return selectedColor\n          } else if (visited.includes(e.properties.nam)) {\n            return visitedColor\n          } else {\n            return nonVisitedColor\n          }\n        })\n        .on(\"mouseover\", function (e) {\n          setLoc(e.properties.nam, e.properties.nam_ja)\n          if (visited.includes(e.properties.nam)) {\n            d3.select(this).style(\"fill\", \"#d9bbb2\")\n          } else {\n            d3.select(this).style(\"fill\", \"lightgrey\")\n          }\n        })\n        .on(\"mouseout\", function (e) {\n          if (e.properties.nam === selected) {\n            d3.select(this).style(\"fill\", selectedColor)\n          } else if (visited.includes(e.properties.nam)) {\n            d3.select(this).style(\"fill\", visitedColor)\n          } else {\n            d3.select(this).style(\"fill\", nonVisitedColor)\n          }\n          resetLoc()\n        })\n        .on(\"click\", function (e) {\n          if (visited.includes(e.properties.nam)) {\n            svg.selectAll(\"path\").style(\"fill\", function (e) {\n              if (visited.includes(e.properties.nam)) {\n                return visitedColor\n              } else {\n                return nonVisitedColor\n              }\n            })\n            setTitleLoc(e.properties.nam, e.properties.nam_ja)\n            d3.select(this).style(\"fill\", selectedColor)\n          }\n        })\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"japan-labels\">\n          <p id=\"english-label\">{this.state.loc}</p>\n          <p id=\"japanese-label\">{this.state.loc_ja}</p>\n        </div>\n        <div id=\"japan\" className=\"mapDiv\"></div>\n      </>\n    )\n  }\n}\n\nexport default JapanMap2023\n","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\nimport Layout from \"../components/layouts/layout\"\nimport SEO from \"../components/seo\"\nimport JapanMap2023 from \"../components/maps/japan-2023\"\nimport PhotoModal from \"../components/photoModal\"\n\nimport { japanPhotoInformation } from \"../images/japan/info\"\n\nimport { Box, Flex, Link, Text, Title } from \"../components/basics\"\n\nexport default function Japan2023({ data }) {\n  const [loc, setLoc] = useState(\"Japan\")\n  const [openPhoto, setOpenPhoto] = useState({})\n  const [modalHidden, setModalHidden] = useState(true)\n\n  var photos = {}\n  var allPhotos = data.allFile.edges\n\n  for (var i = 0; i < allPhotos.length; i++) {\n    var name = allPhotos[i].node.name\n    var place = name.split(\"_\")[0]\n    if (place in photos) {\n      photos[place].push({\n        name: name,\n        image: getImage(allPhotos[i].node.childImageSharp),\n      })\n    } else {\n      photos[place] = [\n        { name: name, image: getImage(allPhotos[i].node.childImageSharp) },\n      ]\n    }\n  }\n\n  return (\n    <Layout tab=\"Japan 2023\">\n      <SEO title=\"Japan 2023\" />\n      <Title>Japan 2023</Title>\n      <Text description>April 2023</Text>\n\n      <JapanMap2023 setLoc={newLoc => setLoc(newLoc)} />\n\n      <Flex boxWidth=\"49.5%\" photos>\n        {loc !== \"Japan\" &&\n          photos[loc.split(\" \")[0].toLowerCase()].map((photo, index) => {\n            return (\n              <Box\n                key={photo.name}\n                photo\n                onClick={e => {\n                  setOpenPhoto(photo)\n                  setModalHidden(false)\n                }}\n              >\n                <GatsbyImage\n                  alt={photo.name}\n                  key={photo.name}\n                  image={photo.image}\n                  style={{ cursor: \"pointer\" }}\n                />\n              </Box>\n            )\n          })}\n      </Flex>\n\n      <PhotoModal\n        text=\"modal text\"\n        hidden={modalHidden}\n        photo={openPhoto}\n        setModalHidden={newModalHidden => setModalHidden(newModalHidden)}\n        info={\n          japanPhotoInformation[openPhoto.name] || {\n            date: \"\",\n            location: \"\",\n            description: [\"\"],\n          }\n        }\n      />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query Japan2023Photos {\n    allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(jpeg)|(png)/\" }\n        dir: { regex: \"/images/japan-2023/\" }\n      }\n    ) {\n      edges {\n        node {\n          id\n          name\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, formats: [AUTO, WEBP, AVIF])\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}